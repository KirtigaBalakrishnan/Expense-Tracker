import tkinter as tk
from tkinter import ttk, messagebox
import csv
import matplotlib.pyplot as plt


class Expense:
    def __init__(self, date, amount, category):
        self.date = date
        self.amount = amount
        self.category = category


class Expense_Tracker_App:
    def __init__(self, main_window): #Usage of functions
        self.main_window = main_window
        self.main_window.title("Expense Tracker")

        style = ttk.Style(main_window)
        style.configure('My.TLabel', background='lightblue')
        style.configure('My.TEntry', background='white')
        style.configure('My.TCombobox', fieldbackground='white', background='white')
        style.configure('My.TButton', background='green', foreground='black', font=('Arial', 12), relief='raised')
        style.map('My.TButton', background=[('active', 'green')], foreground=[('active', 'white')])

        self.expenses = []

        self.date_label = ttk.Label(main_window, text="Date (YYYY-MM-DD):", style='My.TLabel')
        self.date_label.grid(row=0, column=0, padx=10, pady=10)
        self.date_entry = ttk.Entry(main_window, style='My.TEntry')
        self.date_entry.grid(row=0, column=1, padx=10, pady=10)

        self.amount_label = ttk.Label(main_window, text="Amount:", style='My.TLabel')
        self.amount_label.grid(row=1, column=0, padx=10, pady=10)
        self.amount_entry = ttk.Entry(main_window, style='My.TEntry')
        self.amount_entry.grid(row=1, column=1, padx=10, pady=10)

        self.category_label = ttk.Label(main_window, text="Category:", style='My.TLabel')
        self.category_label.grid(row=2, column=0, padx=10, pady=10)
        self.category_combobox = ttk.Combobox(main_window,
                                              values=["Grocery", "Transport", "Utilities", "Entertainment",
                                                      "House (Rent or EMI)", "Miscellaneous"], style='My.TCombobox')
        self.category_combobox.grid(row=2, column=1, padx=10, pady=10)

        self.add_button = tk.Button(main_window, text="Add Expense", command=self.add_expense, bg='light green', fg='black',
                                    font=('Arial', 12), relief='raised')
        self.add_button.grid(row=3, column=0, columnspan=2, padx=10, pady=10)

        self.clear_button = tk.Button(main_window, text="Clear", command=self.clear_button, bg='light green', fg='black',
                                      font=('Arial', 12), relief='raised')
        self.clear_button.grid(row=4, column=0, columnspan=2, padx=10, pady=10)

        self.sum_button = tk.Button(main_window, text="Sum", command=self.sum_expenses, bg='light green', fg='black',
                                    font=('Arial', 12), relief='raised')
        self.sum_button.grid(row=5, column=0, columnspan=2, padx=10, pady=10)

        self.generate_button = tk.Button(main_window, text="Generate Report", command=self.generate_report, bg='light green',
                                         fg='black', font=('Arial', 12), relief='raised')
        self.generate_button.grid(row=6, column=0, columnspan=2, padx=10, pady=10)


    def clear_button(self):
        self.date_entry.delete(0, tk.END)
        self.amount_entry.delete(0, tk.END)
        self.category_combobox.set("")

    def add_expense(self):
        date = self.date_entry.get()
        amount = self.amount_entry.get()
        category = self.category_combobox.get()
        if not date or not amount or not category: #1st Validation check
            messagebox.showerror("Error", "Please fill all the fields.")
            return
        try:
            amount = float(amount) #2nd validation check
        except ValueError:
            messagebox.showerror("Error", "Amount must be a number.")
            return

        expense = Expense(date, amount, category)
        self.expenses.append(expense)

        with open('expenses.csv', mode='a', newline='') as file: #File Handling, Open and save to CSV
            writer = csv.writer(file)
            writer.writerow([expense.date, expense.category, expense.amount])
        messagebox.showinfo("Success", "Expense added successfully.")

    def sum_expenses(self):
        date = self.date_entry.get()
        total_expense = 0
        with open('expenses.csv', 'r') as file:
            reader = csv.reader(file)
            for row in reader:
                if row[0] == date:
                    total_expense += float(row[2])

        if total_expense > 0: #Usage of if, else
            messagebox.showinfo("Total Expense", "Total expense for " + date + ": $" + str(float(total_expense)))
        else:
            messagebox.showerror("Error", "No expenses found for " + date)

    def generate_report(self):
        categories_total = {"Grocery": 0, "Transport": 0, "Utilities": 0, "Entertainment": 0, "House (Rent or EMI)": 0, "Miscellaneous": 0}

        with open('expenses.csv', mode='r') as file:
            reader = csv.reader(file)
            for row in reader:
                category = row[1]
                amount = float(row[2])
                categories_total[category] += amount

        categories = list(categories_total.keys())
        amounts = list(categories_total.values())

        colors = {
            "Grocery": "orange",
            "Transport": "purple",
            "Utilities": "green",
            "Entertainment": "red",
            "House (Rent or EMI)": "blue",
            "Miscellaneous": "pink"
        }

        color_list = [colors[category] for category in categories]

        fig, ax = plt.subplots()
        bars = ax.bar(categories, amounts, color=color_list)
        ax.set_xlabel('Categories')
        ax.set_ylabel('Total Expense (in $)')
        ax.set_title('Total Expense by Category')

        for bar, amount in zip(bars, amounts):
            x_pos = bar.get_x() + bar.get_width() / 2
            y_pos = bar.get_height()
            ax.text(
                x_pos,
                y_pos,
                f'${amount:.2f}',
                ha='center',
                va='bottom',
                fontsize=9,
                color='black'
            )

        plt.xticks(rotation=45)
        plt.tight_layout()
        plt.savefig('report.png')
        plt.savefig('/Users/kay/Desktop/report.png') # Saves the report on the desktop
        plt.show()
        messagebox.showinfo("Report Saved", "Report Saved To Your Desktop.")


main_window = tk.Tk()
main_window.configure(bg='pink')
app = Expense_Tracker_App(main_window)
main_window.mainloop()
#self.add_button = tk.Button(main_window, text="Add Expense", command=self.add_expense, bg='blue', fg='black', font=('Arial', 12), relief='raised')

